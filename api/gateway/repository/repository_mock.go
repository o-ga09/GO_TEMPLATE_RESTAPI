// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"github.com/google/uuid"
	"sync"
)

// Ensure, that RepositoryInterfaceMock does implement RepositoryInterface.
// If this is not the case, regenerate this file with moq.
var _ RepositoryInterface = &RepositoryInterfaceMock{}

// RepositoryInterfaceMock is a mock implementation of RepositoryInterface.
//
//	func TestSomethingThatUsesRepositoryInterface(t *testing.T) {
//
//		// make and configure a mocked RepositoryInterface
//		mockedRepositoryInterface := &RepositoryInterfaceMock{
//			CreateFunc: func(repositoryParamJson RepositoryParamJson) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(id uuid.UUID) error {
//				panic("mock out the Delete method")
//			},
//			GetAllFunc: func() (RepositoryJsons, error) {
//				panic("mock out the GetAll method")
//			},
//			GetByIdFunc: func(id uuid.UUID) (RepositoryJson, error) {
//				panic("mock out the GetById method")
//			},
//			UpdateFunc: func(id uuid.UUID, param RepositoryParamJson) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedRepositoryInterface in code that requires RepositoryInterface
//		// and then make assertions.
//
//	}
type RepositoryInterfaceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(repositoryParamJson RepositoryParamJson) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id uuid.UUID) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func() (RepositoryJsons, error)

	// GetByIdFunc mocks the GetById method.
	GetByIdFunc func(id uuid.UUID) (RepositoryJson, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(id uuid.UUID, param RepositoryParamJson) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// RepositoryParamJson is the repositoryParamJson argument value.
			RepositoryParamJson RepositoryParamJson
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
		}
		// GetById holds details about calls to the GetById method.
		GetById []struct {
			// ID is the id argument value.
			ID uuid.UUID
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// ID is the id argument value.
			ID uuid.UUID
			// Param is the param argument value.
			Param RepositoryParamJson
		}
	}
	lockCreate  sync.RWMutex
	lockDelete  sync.RWMutex
	lockGetAll  sync.RWMutex
	lockGetById sync.RWMutex
	lockUpdate  sync.RWMutex
}

// Create calls CreateFunc.
func (mock *RepositoryInterfaceMock) Create(repositoryParamJson RepositoryParamJson) error {
	if mock.CreateFunc == nil {
		panic("RepositoryInterfaceMock.CreateFunc: method is nil but RepositoryInterface.Create was just called")
	}
	callInfo := struct {
		RepositoryParamJson RepositoryParamJson
	}{
		RepositoryParamJson: repositoryParamJson,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(repositoryParamJson)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRepositoryInterface.CreateCalls())
func (mock *RepositoryInterfaceMock) CreateCalls() []struct {
	RepositoryParamJson RepositoryParamJson
} {
	var calls []struct {
		RepositoryParamJson RepositoryParamJson
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RepositoryInterfaceMock) Delete(id uuid.UUID) error {
	if mock.DeleteFunc == nil {
		panic("RepositoryInterfaceMock.DeleteFunc: method is nil but RepositoryInterface.Delete was just called")
	}
	callInfo := struct {
		ID uuid.UUID
	}{
		ID: id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedRepositoryInterface.DeleteCalls())
func (mock *RepositoryInterfaceMock) DeleteCalls() []struct {
	ID uuid.UUID
} {
	var calls []struct {
		ID uuid.UUID
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *RepositoryInterfaceMock) GetAll() (RepositoryJsons, error) {
	if mock.GetAllFunc == nil {
		panic("RepositoryInterfaceMock.GetAllFunc: method is nil but RepositoryInterface.GetAll was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc()
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedRepositoryInterface.GetAllCalls())
func (mock *RepositoryInterfaceMock) GetAllCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetById calls GetByIdFunc.
func (mock *RepositoryInterfaceMock) GetById(id uuid.UUID) (RepositoryJson, error) {
	if mock.GetByIdFunc == nil {
		panic("RepositoryInterfaceMock.GetByIdFunc: method is nil but RepositoryInterface.GetById was just called")
	}
	callInfo := struct {
		ID uuid.UUID
	}{
		ID: id,
	}
	mock.lockGetById.Lock()
	mock.calls.GetById = append(mock.calls.GetById, callInfo)
	mock.lockGetById.Unlock()
	return mock.GetByIdFunc(id)
}

// GetByIdCalls gets all the calls that were made to GetById.
// Check the length with:
//
//	len(mockedRepositoryInterface.GetByIdCalls())
func (mock *RepositoryInterfaceMock) GetByIdCalls() []struct {
	ID uuid.UUID
} {
	var calls []struct {
		ID uuid.UUID
	}
	mock.lockGetById.RLock()
	calls = mock.calls.GetById
	mock.lockGetById.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RepositoryInterfaceMock) Update(id uuid.UUID, param RepositoryParamJson) error {
	if mock.UpdateFunc == nil {
		panic("RepositoryInterfaceMock.UpdateFunc: method is nil but RepositoryInterface.Update was just called")
	}
	callInfo := struct {
		ID    uuid.UUID
		Param RepositoryParamJson
	}{
		ID:    id,
		Param: param,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(id, param)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedRepositoryInterface.UpdateCalls())
func (mock *RepositoryInterfaceMock) UpdateCalls() []struct {
	ID    uuid.UUID
	Param RepositoryParamJson
} {
	var calls []struct {
		ID    uuid.UUID
		Param RepositoryParamJson
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
