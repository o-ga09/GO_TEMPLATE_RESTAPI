// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package administrator

import (
	"context"
	"sync"
)

// Ensure, that AdminServiceRepositoryMock does implement AdminServiceRepository.
// If this is not the case, regenerate this file with moq.
var _ AdminServiceRepository = &AdminServiceRepositoryMock{}

// AdminServiceRepositoryMock is a mock implementation of AdminServiceRepository.
//
//	func TestSomethingThatUsesAdminServiceRepository(t *testing.T) {
//
//		// make and configure a mocked AdminServiceRepository
//		mockedAdminServiceRepository := &AdminServiceRepositoryMock{
//			DeleteFunc: func(ctx context.Context, id string) error {
//				panic("mock out the Delete method")
//			},
//			FindUserFunc: func(ctx context.Context, id string) (*Administrator, error) {
//				panic("mock out the FindUser method")
//			},
//			SaveFunc: func(ctx context.Context, param *Administrator) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedAdminServiceRepository in code that requires AdminServiceRepository
//		// and then make assertions.
//
//	}
type AdminServiceRepositoryMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id string) error

	// FindUserFunc mocks the FindUser method.
	FindUserFunc func(ctx context.Context, id string) (*Administrator, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, param *Administrator) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// FindUser holds details about calls to the FindUser method.
		FindUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param *Administrator
		}
	}
	lockDelete   sync.RWMutex
	lockFindUser sync.RWMutex
	lockSave     sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *AdminServiceRepositoryMock) Delete(ctx context.Context, id string) error {
	if mock.DeleteFunc == nil {
		panic("AdminServiceRepositoryMock.DeleteFunc: method is nil but AdminServiceRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedAdminServiceRepository.DeleteCalls())
func (mock *AdminServiceRepositoryMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// FindUser calls FindUserFunc.
func (mock *AdminServiceRepositoryMock) FindUser(ctx context.Context, id string) (*Administrator, error) {
	if mock.FindUserFunc == nil {
		panic("AdminServiceRepositoryMock.FindUserFunc: method is nil but AdminServiceRepository.FindUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindUser.Lock()
	mock.calls.FindUser = append(mock.calls.FindUser, callInfo)
	mock.lockFindUser.Unlock()
	return mock.FindUserFunc(ctx, id)
}

// FindUserCalls gets all the calls that were made to FindUser.
// Check the length with:
//
//	len(mockedAdminServiceRepository.FindUserCalls())
func (mock *AdminServiceRepositoryMock) FindUserCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockFindUser.RLock()
	calls = mock.calls.FindUser
	mock.lockFindUser.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *AdminServiceRepositoryMock) Save(ctx context.Context, param *Administrator) error {
	if mock.SaveFunc == nil {
		panic("AdminServiceRepositoryMock.SaveFunc: method is nil but AdminServiceRepository.Save was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param *Administrator
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, param)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedAdminServiceRepository.SaveCalls())
func (mock *AdminServiceRepositoryMock) SaveCalls() []struct {
	Ctx   context.Context
	Param *Administrator
} {
	var calls []struct {
		Ctx   context.Context
		Param *Administrator
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
